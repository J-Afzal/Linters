parameters:
    - name: path_to_linters_submodule_root
      type: string
    - name: path_back_to_repository_root
      type: string
    - name: run_gitignore_linter
      type: boolean
      default: true
    - name: run_gitattributes_linter
      type: boolean
      default: true
    - name: run_cspell_configuration_linter
      type: boolean
      default: true
    - name: run_prettier_ignore_linter
      type: boolean
      default: true
    - name: run_cspell_linter
      type: boolean
      default: true
    - name: run_prettier_linter
      type: boolean
      default: true
    - name: run_psscript_analyzer_linter
      type: boolean
      default: true
    - name: run_clang_tools_linter
      type: boolean
      default: true

# # TODO: can this be made in to array like github actions?
# strategy:
#   maxParallel: 3
#   matrix:
#     linux:
#         imageName: "ubuntu-latest"
#     macos:
#         imageName: "macos-latest"
#     windows:
#         imageName: "windows-latest"

# TODO: use stages and remove above line and use depends on. 1 stage = job 1 = deps install, jobs 2+ = linting
stages:
    - stage: Linting-PowerShell
      displayName: Linting (PowerShell)
      pool:
        vmImage: $(imageName)
      jobs:
        - job: InstallLintingDependencies
          displayName: Install linting dependencies
          steps:
            - checkout: self
              submodules: true

            # TODO: check that other jobs skip if this fails
            - task: PowerShell@2
              displayName: Install linting dependencies
              inputs:
                targetType: inline
                script: |
                    Import-Module ${{ parameters.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                    Install-LintingDependencies -PathToLintersSubmodulesRoot ${{ parameters.path_to_linters_submodule_root }} -Verbose

        # TODO: check that all linting checks can be skipped and same for github actions
        - job: RunGitIgnoreLinter
          displayName: Run gitignore linter
          dependsOn: InstallLintingDependencies
          condition: succeededOrFailed() && ${{ parameters.run_gitignore_linter }}
          steps:
            - task: PowerShell@2
              displayName: Run gitignore linter
              inputs:
                targetType: inline
                script: |
                    Import-Module ${{ parameters.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                    Test-GitIgnoreFile -Verbose

        - job: RunGitAttributesLinter
          displayName: Run gitattributes linter
          dependsOn: InstallLintingDependencies
          condition: succeededOrFailed() && ${{ parameters.run_gitattributes_linter }}
          steps:
            - task: PowerShell@2
              displayName: Run gitattributes linter
              inputs:
                targetType: inline
                script: |
                    Import-Module ${{ parameters.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                    Test-GitAttributesFile -Verbose

        - job: RunCSpellConfigurationLinter
          displayName: Run cspell configuration linter
          dependsOn: InstallLintingDependencies
          condition: succeededOrFailed() && ${{ parameters.run_cspell_configuration_linter }}
          steps:
            - task: PowerShell@2
              displayName: Run cspell configuration linter
              inputs:
                targetType: inline
                script: |
                    Import-Module ${{ parameters.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                    Test-CSpellConfiguration -Verbose

        - job: RunCSpell
          displayName: Run cspell
          dependsOn: InstallLintingDependencies
          condition: succeededOrFailed() && ${{ parameters.run_cspell_linter }}
          steps:
            - task: PowerShell@2
              displayName: Run cspell
              inputs:
                targetType: inline
                script: |
                    Import-Module ${{ parameters.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                    Test-CodeUsingCSpell -PathToLintersSubmodulesRoot ${{ parameters.path_to_linters_submodule_root }} -PathBackToRepositoryRoot ${{ parameters.path_back_to_repository_root }} -Verbose

        - job: RunPrettier
          displayName: Run prettier
          dependsOn: InstallLintingDependencies
          condition: succeededOrFailed() && ${{ parameters.run_prettier_linter }}
          steps:
            - task: PowerShell@2
              displayName: Run prettier
              inputs:
                targetType: inline
                script: |
                    Import-Module ${{ parameters.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                    Test-CodeUsingPrettier -PathToLintersSubmodulesRoot ${{ parameters.path_to_linters_submodule_root }} -PathBackToRepositoryRoot ${{ parameters.path_back_to_repository_root }} -Verbose

        - job: RunPSScriptAnalyzer
          displayName: Run PSScriptAnalyzer
          dependsOn: InstallLintingDependencies
          condition: succeededOrFailed() && ${{ parameters.run_psscript_analyzer_linter }}
          steps:
            - task: PowerShell@2
              displayName: Run PSScriptAnalyzer
              inputs:
                targetType: inline
                script: |
                    Import-Module ${{ parameters.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                    Test-CodeUsingPSScriptAnalyzer -PathToLintersSubmodulesRoot ${{ parameters.path_to_linters_submodule_root }} -Verbose




        - job: RunClangTools
          displayName: Run clang tools
          dependsOn: InstallLintingDependencies
          condition: succeededOrFailed() && ${{ parameters.run_clang_tools_linter }}
          steps:
            - task: Bash@3
              displayName: Run clang tools
              inputs:
                targetType: inline
                script: |
                  # Install the ninja and the latest version of clang-tidy and clang-format
                  if [ "{{ matrix.os }}" = macos-latest ]
                  then
                      brew install ninja
                      brew install llvm
                      # Override pre-installed clang by adding to the path
                      export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
                  fi

                  if [ "{{ matrix.os }}" = ubuntu-latest ]
                  then
                      sudo apt-get install ninja-build

                      # Install brew to get latest llvm and clang tools
                      test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
                      test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
                      echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bashrc
                      export PATH="$HOME/.linuxbrew/bin:$PATH"

                      brew install llvm
                  fi

                  if [ "{{ matrix.os }}" = windows-latest ]
                  then
                      choco install ninja -y
                      choco upgrade llvm -y
                  fi

                  # Configure CMake to create the "compile_commands.json" file
                  cmake -S . -B ./build -G "Ninja"

                  pwsh -command "Import-Module ${{ parameters.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1; Test-CodeUsingClangTools -PathToLintersSubmodulesRoot ${{ parameters.path_to_linters_submodule_root }} -Verbose"
