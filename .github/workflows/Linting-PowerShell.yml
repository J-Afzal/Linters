name: Linting (PowerShell)

on:
    workflow_call:
        inputs:
            path_to_linters_submodule_root:
                required: true
                type: string
            path_back_to_repository_root:
                required: true
                type: string
            run_powershell_linters:
                required: false
                type: boolean
                default: false
            run_cpp_linters:
                required: false
                type: boolean
                default: false

jobs:
    lint:
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                os: [macos-latest, ubuntu-latest, windows-latest]

        defaults:
            run:
                shell: pwsh

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  submodules: true

            - name: Install linting dependencies
              id: dependencies
              shell: bash
              run: |
                  echo "##[section]Installing linting dependencies..."

                  echo "##[command]Changing directory to Linters submodule folder..."
                  cd ${{ inputs.path_to_linters_submodule_root }}

                  echo "##[command]Installing npm dependencies..."
                  npm install

                  if [ ${{ inputs.run_cpp_linters }} == true ]
                  then
                      if [ ${{ matrix.os }} == macos-latest ]
                      then
                          brew install ninja
                          brew install llvm
                          brew install doxygen

                      elif [ ${{ matrix.os }} == ubuntu-latest ]
                      then
                          sudo apt-get install ninja-build

                          # Install brew to get latest llvm, clang tools and doxygen
                          test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
                          test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
                          echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bashrc

                          brew install llvm
                          brew install doxygen

                      elif [ ${{ matrix.os }} == windows-latest ]
                      then
                          choco install ninja -y
                          choco upgrade llvm -y
                          choco install doxygen.portable -y

                      else
                          echo "##[error]'${{ matrix.os }}' is an unsupported platform."
                      fi
                  fi

                  echo "##[section]All linting dependencies installed!"

            - name: Run gitignore linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-GitIgnoreFile -Verbose

            - name: Run gitattributes linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-GitAttributesFile -Verbose

            - name: Run cspell configuration linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-CSpellConfiguration -Verbose

            - name: Run cspell
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-CodeUsingCSpell -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -PathBackToRepositoryRoot ${{ inputs.path_back_to_repository_root }} -Verbose

            - name: Run prettier
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-CodeUsingPrettier -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -PathBackToRepositoryRoot ${{ inputs.path_back_to_repository_root }} -Verbose

            - name: Run PSScriptAnalyzer
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_powershell_linters
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-CodeUsingPSScriptAnalyzer -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -Verbose

            # Needed for the Build-CppCodeUsingCMake command.
            - uses: ilammy/msvc-dev-cmd@v1
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters && ${{ matrix.os }} == 'windows-latest'

            - name: Run clang tools
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters
              run: |
                  # Exit with a warning if no CMakeLists.txt found
                  if (-Not (Test-Path -LiteralPath ./CMakeLists.txt)) {
                      Write-Information "##[warning]No CMakeLists.txt file found at current directory! Please check if this is expected!"
                  }

                  else {
                      Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1

                      # Configure CMake to create the "compile_commands.json" file
                      Import-Module ./modules/Build.psd1
                      Build-CppCodeUsingCMake -Platform ${{ matrix.os }} -BuildType Release -BuildDirectory build -Parallel 8 -Verbose
                      Assert-ExternalCommandError -ThrowError

                      Test-CodeUsingClangTools -Platform ${{ matrix.os }} -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -Verbose
                  }

            - name: Check doxygen documentation is updated
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters
              run: |
                  # No idea why but other platforms always result in a diff.
                  if ("${{ matrix.os }}" -eq "macos-latest") {
                      Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                      Test-DoxygenDocumentation -Verbose
                  }

                  else {
                      Write-Information "##[section]${{ matrix.os }} is not supported by this step."
                  }

            - name: Upload doxygen documentation
              uses: actions/upload-artifact@v4
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters
              with:
                  name: doxygen-docs-${{ matrix.os }}
                  path: ./docs/html/
