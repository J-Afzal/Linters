name: Linting (PowerShell)

on:
    workflow_call:
        inputs:
            path_to_linters_submodule_root:
                required: true
                type: string
            path_back_to_repository_root:
                required: true
                type: string
            run_powershell_linters:
                required: false
                type: boolean
                default: false
            run_cpp_linters:
                required: false
                type: boolean
                default: false

jobs:
    lint:
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                os: [macos-latest, ubuntu-latest, windows-latest]

        defaults:
            run:
                shell: pwsh

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  submodules: true

            # - name: Install linting dependencies
            #   id: dependencies
            #   shell: bash
            #   run: |
            #       echo "##[]"
            #   # TODO: Delete dependencies and make the whole thing a single bash step.

            - name: Install ubuntu-latest linting dependencies
              if: ${{ matrix.os }} == ubuntu-latest
              shell: bash
              run: |
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                pwsh -c "Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1; Install-LintingDependencies -Platform ${{ matrix.os }} -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -PathBackToRepositoryRoot ${{ inputs.path_back_to_repository_root }} -InstallCppLintingDependencies -Verbose"

            - name: Install linting dependencies
              id: dependencies
              if: ${{ matrix.os }} != ubuntu-latest
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Install-LintingDependencies -Platform ${{ matrix.os }} -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -PathBackToRepositoryRoot ${{ inputs.path_back_to_repository_root }} -InstallCppLintingDependencies:$${{ inputs.run_cpp_linters}} -Verbose

            - name: Run gitignore linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-GitIgnoreFile -Verbose

            - name: Run gitattributes linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-GitAttributesFile -Verbose

            - name: Run cspell configuration linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-CSpellConfiguration -Verbose

            - name: Run cspell
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-CodeUsingCSpell -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -PathBackToRepositoryRoot ${{ inputs.path_back_to_repository_root }} -Verbose

            - name: Run prettier
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-CodeUsingPrettier -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -PathBackToRepositoryRoot ${{ inputs.path_back_to_repository_root }} -Verbose

            - name: Run PSScriptAnalyzer
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_powershell_linters
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-CodeUsingPSScriptAnalyzer -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -Verbose

            - name: Run clang tools
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters
              run: |
                  # Exit with a warning if no CMakeLists.txt found
                  if (-Not (Test-Path -LiteralPath ./CMakeLists.txt)) {
                      Write-Information "##[warning]No CMakeLists.txt file found at current directory! Please check if this is expected!"
                  }

                  else {
                      Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1

                      # Configure CMake to create the "compile_commands.json" file
                      Import-Module ./modules/Build.psd1
                      Build-CppCodeUsingCMake -Platform ${{ matrix.os }} -BuildType Release -BuildDirectory build -Parallel 8 -Verbose
                      Assert-ExternalCommandError -ThrowError

                      Test-CodeUsingClangTools -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -Verbose
                  }

            - name: Check doxygen documentation is updated
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters
              run: |
                  # No idea why but other platforms always result in a diff.
                  if ("${{ matrix.os }}" -eq "macos-latest") {
                      Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                      Test-DoxygenDocumentation -Verbose
                  }

                  else {
                      Write-Information "##[section]${{ matrix.os }} is not supported by this step."
                  }

            - name: Upload doxygen documentation
              uses: actions/upload-artifact@v4
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters
              with:
                  name: doxygen-docs-${{ matrix.os }}
                  path: ./docs/html/
