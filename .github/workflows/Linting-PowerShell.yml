name: Linting (PowerShell)

on:
    workflow_call:
        inputs:
            path_to_linters_submodule_root:
                required: true
                type: string
            path_back_to_repository_root:
                required: true
                type: string
            run_powershell_linters:
                required: false
                type: boolean
                default: false
            run_cpp_linters:
                required: false
                type: boolean
                default: false

jobs:
    lint:
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                os: [macos-latest, ubuntu-latest, windows-latest]

        defaults:
            run:
                shell: pwsh

        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true

            - name: Install linting dependencies
              id: dependencies
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Install-LintingDependencies -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -Verbose

            - name: Run gitignore linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-GitIgnoreFile -Verbose

            - name: Run gitattributes linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-GitAttributesFile -Verbose

            - name: Run cspell configuration linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-CSpellConfiguration -Verbose

            - name: Run cspell
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-CodeUsingCSpell -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -PathBackToRepositoryRoot ${{ inputs.path_back_to_repository_root }} -Verbose

            - name: Run prettier
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-CodeUsingPrettier -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -PathBackToRepositoryRoot ${{ inputs.path_back_to_repository_root }} -Verbose

            - name: Run PSScriptAnalyzer
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_powershell_linters
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-CodeUsingPSScriptAnalyzer -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -Verbose

            - name: Run clang tools
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters
              shell: bash
              run: |
                  #   # Exit with a warning if no CMakeLists.txt found
                  #   if [ ! -f ./CMakeLists.txt ]; then
                  #       echo "##[warning]No CMakeLists.txt file found at current directory! Please check if this is expected!"
                  #       exit 0
                  #   fi

                  # Install the ninja and the latest version of clang-tidy and clang-format
                  if [ ${{ matrix.os }} = macos-latest ]
                  then
                      brew install ninja
                      brew install llvm
                      # Override pre-installed clang by adding to the path
                      export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
                  fi

                  if [ ${{ matrix.os }} = ubuntu-latest ]
                  then
                      sudo apt-get install ninja-build
                      sudo apt-get install clang-19

                      update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-19
                      update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-19
                  fi

                  if [ ${{ matrix.os }} = windows-latest ]
                  then
                      choco install ninja -y
                      choco install llvm -y
                  fi

                  clang-tidy --version
                  clang-format --version

                  # Configure CMake to create the "compile_commands.json" file
                  cmake -S . -B ./build -G "Ninja"

                  pwsh -command "Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1; Test-CodeUsingClangTools -PathToLintersSubmodulesRoot ${{ inputs.path_to_linters_submodule_root }} -Verbose"

            - name: Check doxygen documentation is updated
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters
              run: |
                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-powershell/Linters.psd1
                  Test-DoxygenDocumentation -Platform ${{ matrix.os }} -Verbose
